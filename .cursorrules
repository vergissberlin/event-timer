# Cursor Rules for Event Timer PWA

## Project Overview
This is a Progressive Web App (PWA) for event timers with TypeScript, Tailwind CSS and automatic GitHub Pages deployment.

## Code Style & Conventions

### Package Manager
- Use **pnpm** as package manager
- Replace all npm commands with pnpm
- Commit pnpm-lock.yaml

### Font
- Use **Montserrat** as primary font
- Fallback: Sans-serif
- Include Google Fonts CDN for Montserrat

### TypeScript
- Use strict typing
- Interface-based development
- No any types without explicit justification

### CSS/Tailwind
- Tailwind CSS for styling
- Custom CSS only when necessary
- Prioritize responsive design
- Montserrat as default font

## Testing

### Test-Framework
- **Jest** als Test-Runner
- **jsdom** für DOM-Tests
- **ts-jest** für TypeScript-Support
- **@testing-library/jest-dom** für DOM-Assertions

### Test Conventions
- Unit tests for all classes and functions
- Mock external dependencies (fetch, Audio API, etc.)
- Test coverage minimum 80%
- Descriptive test names in English

### Test Structure
```
tests/
├── setup.ts              # Jest setup & mocks
├── audio.test.ts         # AudioManager tests
├── timer.test.ts         # Timer tests
├── events.test.ts        # EventsManager tests
├── settings.test.ts      # SettingsManager tests
└── favicon.test.ts       # FaviconGenerator tests
```

### Test Commands
- `pnpm test` - Run all tests
- `pnpm test:watch` - Tests in watch mode
- `pnpm test:coverage` - Tests with coverage report
- `pnpm test:ci` - Tests for CI/CD

## GitHub Actions

### Deployment
- Automatisches Deployment auf GitHub Pages
- Build bei Push auf main Branch
- PWA-Manifest und Service Worker korrekt konfiguriert
- HTTPS für PWA-Features erforderlich

### CI/CD Pipeline
- **Type Check**: TypeScript-Kompilierung
- **Lint**: ESLint mit TypeScript-Regeln
- **Format**: Prettier Code-Formatierung
- **Tests**: Jest Unit Tests mit Coverage
- **Build**: Vite Production Build

### Workflow Rules
- Use Node.js 18+
- pnpm install and build
- gh-pages branch for deployment
- Cache for pnpm dependencies

## PWA-specific

### Manifest
- Correct icons in various sizes
- Theme colors configured
- Display: standalone

### Service Worker
- Offline functionality
- Cache strategies defined
- Update handling

### Audio
- Web Audio API for dynamic sound generation
- Fallback to HTML Audio
- Speech API for countdown
- AudioContext management

## Versioning & Commits

### Semantic Versioning
- Follow **Semantic Versioning (SemVer)** format: `MAJOR.MINOR.PATCH`
- **MAJOR**: Breaking changes, incompatible API changes
- **MINOR**: New features, backward compatible
- **PATCH**: Bug fixes, backward compatible
- Update version in `package.json` before release
- Use `pnpm version` commands for versioning

### Conventional Commits
- Use **Conventional Commits** format: `<type>[optional scope]: <description>`
- **Types**:
  - `feat`: New features
  - `fix`: Bug fixes
  - `docs`: Documentation changes
  - `style`: Code style changes (formatting, etc.)
  - `refactor`: Code refactoring
  - `test`: Test additions or changes
  - `chore`: Build process, tooling changes
  - `perf`: Performance improvements
  - `ci`: CI/CD changes
  - `build`: Build system changes
  - `revert`: Revert previous commits

- **Scope** (optional): Component or feature affected
- **Description**: Clear, concise description in present tense
- **Body** (optional): Detailed explanation
- **Footer** (optional): Breaking changes, issue references

### Commit Examples
```
feat: add auto-switch feature for events
feat(audio): implement Web Audio API for dynamic sounds
fix(timer): resolve off-by-one error in countdown
fix: correct GitHub Actions concurrency issue
docs: update README with new features
test: add unit tests for EventsManager
chore: update dependencies to latest versions
ci: fix deprecated GitHub Actions versions
build: optimize bundle size with tree shaking
revert: revert breaking change in timer logic
```

### Version Management
- Use `pnpm version patch` for bug fixes
- Use `pnpm version minor` for new features
- Use `pnpm version major` for breaking changes
- Tag releases with `git tag v1.0.0`
- Push tags with `git push --tags`

### Migration to New Standards
- **Current Version**: 1.0.0 (Semantic Versioning compliant)
- **Next Commits**: Use Conventional Commits format
- **Breaking Changes**: Document in commit body with `BREAKING CHANGE:`
- **Issue References**: Use `Closes #123` or `Fixes #123` in commit footer
- **Release Notes**: Generate from Conventional Commits for GitHub releases

## File Structure
```
event-timer/
├── .github/workflows/     # GitHub Actions
├── src/                   # TypeScript source
├── tests/                 # Unit tests
├── data/                  # Event configuration
├── public/               # Static assets
└── dist/                 # Build output
```

## Performance
- Lazy loading for images
- Minification for production
- Service Worker caching
- Optimized bundle size

## Browser Compatibility
- Chrome/Chromium (Web Audio API)
- Firefox (Web Audio API)
- Safari (WebkitAudioContext)
- Edge (Web Audio API)
- Mobile browsers (iOS Safari, Chrome Mobile)

## Auto-Switch Feature
- Automatic switching to events (configurable)
- Default: 30 seconds before event start
- Global configuration in settings.json
- Intelligent navigation (overview ↔ detail)

## Audio Features
- Warning Sound: 800Hz Sine-Wave, 0.5s
- End Sound: 3x 600Hz Square-Wave beeps
- Start Sound: Dramatic sequence (Sweep + Chord)
- Speech Countdown: Last 10 seconds
- Activate AudioContext for user interaction

## Error Handling
- Graceful degradation for missing APIs
- Implement fallback mechanisms
- User-friendly error messages
- Console logging for debugging

## Security
- HTTPS for PWA features
- Content Security Policy
- Sanitize user input
- Secure Audio Context usage
