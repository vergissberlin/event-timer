# Cursor Rules for Event Timer PWA

## Project Overview

This is a Progressive Web App (PWA) for event timers with TypeScript, Tailwind CSS and automatic GitHub Pages deployment.
Framework: Astro v4 (static output), React Islands via `@astrojs/react`.

- Base-Path: The app is hosted unter `/event-timer/`. Always use `/event-timer/` for routes, assets and fetches. The base is configured in `astro.config.mjs` (`site` + `base`).

## Code Style & Conventions

### Package Manager

- Use **pnpm** as package manager
- Replace all npm commands with pnpm
- Commit pnpm-lock.yaml

### Font

- Use **Montserrat** as primary font
- Fallback: Sans-serif
- Include Google Fonts CDN for Montserrat

### TypeScript

- Use strict typing
- Interface-based development
- No any types without explicit justification

### CSS/Tailwind

- Tailwind CSS for styling (via `@astrojs/tailwind`)
- Custom CSS only when necessary
- Prioritize responsive design
- Montserrat as default font

### Astro & Routing

- Pages under `src/pages` (`index.astro`, dynamic route `event/[id].astro`)
- Use `src/shared/Layout.astro` as base layout
- Respect the fixed Base-Path `/event-timer/` for links, images, and data fetches
- Prefer absolute, base-aware paths for static assets (e.g. `/event-timer/icons/icon-192x192.png`)

### UI Components

- Prefer headless components with Tailwind
- shadcn/ui pattern is allowed for primitives; use Radix primitives where helpful
- Co-locate UI components in `src/components` or `src/components/ui`

## Testing

### Test-Framework

- **Jest** als Test-Runner
- **jsdom** für DOM-Tests
- **ts-jest** für TypeScript-Support
- **@testing-library/jest-dom** für DOM-Assertions

### Test Conventions

- Unit tests for all classes and functions
- Mock external dependencies (fetch, Audio API, etc.)
- Test coverage minimum 80%
- Descriptive test names in English

### Test Structure

```
tests/
├── setup.ts              # Jest setup & mocks
├── audio.test.ts         # AudioManager tests
├── timer.test.ts         # Timer tests
├── events.test.ts        # EventsManager tests
├── settings.test.ts      # SettingsManager tests
└── favicon.test.ts       # FaviconGenerator tests
```

### Test Commands

- `pnpm test` - Run all tests
- `pnpm test:watch` - Tests in watch mode
- `pnpm test:coverage` - Tests with coverage report
- `pnpm test:ci` - Tests for CI/CD

## GitHub Actions

### Deployment

- Automatisches Deployment auf GitHub Pages
- Build bei Push auf main Branch
- PWA-Manifest und Service Worker korrekt konfiguriert
- HTTPS für PWA-Features erforderlich
- Base-Path `base: '/event-timer/'` in `astro.config.mjs` muss gesetzt sein

### CI/CD Pipeline

- **Type Check**: TypeScript-Kompilierung (`pnpm type-check`)
- **Lint**: ESLint mit TypeScript-Regeln (`pnpm lint`)
- **Format**: Prettier Code-Formatierung (`pnpm format`)
- **Tests**: Jest Unit Tests mit Coverage (`pnpm test:ci`)
- **Build**: Astro Production Build (`pnpm build`)

### Workflow Rules

- Use Node.js 18+
- pnpm install and build (use pnpm cache in CI)
- gh-pages branch for deployment (via `gh-pages -d dist`)
- Cache for pnpm dependencies

## PWA-specific

### Manifest

- Correct icons in various sizes
- Theme colors configured
- Display: standalone

### Service Worker

- Offline functionality
- Cache strategies defined
- Update handling
- Optional: Use Workbox (`workbox-window`) for update prompts

### Audio

- Web Audio API for dynamic sound generation
- Fallback to HTML Audio
- Speech API for countdown
- AudioContext management

## Versioning & Commits

### Semantic Versioning

- Follow **Semantic Versioning (SemVer)** format: `MAJOR.MINOR.PATCH`
- **MAJOR**: Breaking changes, incompatible API changes
- **MINOR**: New features, backward compatible
- **PATCH**: Bug fixes, backward compatible
- Update version in `package.json` before release
- Use `pnpm version` commands for versioning

### Conventional Commits

- Use **Conventional Commits** format: `<type>[optional scope]: <description>`
- **Types**:
  - `feat`: New features
  - `fix`: Bug fixes
  - `docs`: Documentation changes
  - `style`: Code style changes (formatting, etc.)
  - `refactor`: Code refactoring
  - `test`: Test additions or changes
  - `chore`: Build process, tooling changes
  - `perf`: Performance improvements
  - `ci`: CI/CD changes
  - `build`: Build system changes
  - `revert`: Revert previous commits

- **Scope** (optional): Component or feature affected
- **Description**: Clear, concise description in present tense
- **Body** (optional): Detailed explanation
- **Footer** (optional): Breaking changes, issue references

### Commit Examples

```
feat: add auto-switch feature for events
feat(audio): implement Web Audio API for dynamic sounds
fix(timer): resolve off-by-one error in countdown
fix: correct GitHub Actions concurrency issue
docs: update README with new features
test: add unit tests for EventsManager
chore: update dependencies to latest versions
ci: fix deprecated GitHub Actions versions
build: optimize bundle size with tree shaking
revert: revert breaking change in timer logic
```

### Version Management

- Use `pnpm version patch` for bug fixes
- Use `pnpm version minor` for new features
- Use `pnpm version major` for breaking changes
- Tag releases with `git tag v1.0.0`
- Push tags with `git push --tags`

### Migration to New Standards

- **Current Version**: 1.0.0 (Semantic Versioning compliant)
- **Next Commits**: Use Conventional Commits format
- **Breaking Changes**: Document in commit body with `BREAKING CHANGE:`
- **Issue References**: Use `Closes #123` or `Fixes #123` in commit footer
- **Release Notes**: Generate from Conventional Commits for GitHub releases

## File Structure

```
event-timer/
├── .github/workflows/     # GitHub Actions
├── src/                   # TypeScript source
│   ├── pages/             # Astro pages (index.astro, event/[id].astro)
│   ├── shared/            # Layouts (Layout.astro)
│   ├── components/        # UI components (incl. ui/)
│   ├── styles/            # global.css (Tailwind base)
│   ├── lib/               # utilities
│   └── ...                # audio.ts, events.ts, settings.ts, timer.ts, favicon.ts, main.ts
├── public/                # Static assets (icons, tailwind.css, data/)
├── data/                  # Event configuration (source)
├── tests/                 # Unit tests
└── dist/                  # Build output
```

## Performance

- Lazy loading for images
- Minification for production
- Service Worker caching
- Optimized bundle size

## Browser Compatibility

- Chrome/Chromium (Web Audio API)
- Firefox (Web Audio API)
- Safari (WebkitAudioContext)
- Edge (Web Audio API)
- Mobile browsers (iOS Safari, Chrome Mobile)

## Auto-Switch Feature

- Automatic switching to events (configurable)
- Default: 30 seconds before event start
- Global configuration in settings.json
- Intelligent navigation (overview ↔ detail)

## Audio Features

- Warning Sound: 800Hz Sine-Wave, 0.5s
- End Sound: 3x 600Hz Square-Wave beeps
- Start Sound: Dramatic sequence (Sweep + Chord)
- Speech Countdown: Last 10 seconds
- Activate AudioContext for user interaction

## Error Handling

- Graceful degradation for missing APIs
- Implement fallback mechanisms
- User-friendly error messages
- Console logging for debugging

## Security

- HTTPS for PWA features
- Content Security Policy
- Sanitize user input
- Secure Audio Context usage

## Development Workflow

### Feature Development

- **Documentation First**: Update documentation before implementing features
- **Test-Driven Development**: Write tests before implementing features
- **Complete Coverage**: Every new feature must include:
  - Unit tests for all new functions/classes
  - Integration tests for feature workflows
  - Documentation updates (README, API docs, etc.)
  - TypeScript type definitions
  - Error handling and edge cases

### Code Quality Standards

- **Documentation Updates**: Always update relevant documentation when adding/modifying features
  - README.md for user-facing changes
  - CONTRIBUTING.md for development process changes
  - docs/ directory for technical documentation
  - API documentation for new public interfaces
- **Test Coverage**: Maintain minimum 80% test coverage
  - New features must have comprehensive test coverage
  - Bug fixes must include regression tests
  - Refactoring must preserve existing test coverage
- **Type Safety**: All new code must be fully typed
  - No `any` types without explicit justification
  - Interface definitions for all data structures
  - Proper error handling with typed exceptions

### Feature Checklist

Before committing any feature:

- [ ] Feature implementation complete
- [ ] Unit tests written and passing
- [ ] Integration tests written and passing
- [ ] Documentation updated (README, API docs, etc.)
- [ ] TypeScript types defined
- [ ] Error handling implemented
- [ ] Edge cases covered
- [ ] Code reviewed and linted
- [ ] Build passes successfully
- [ ] All tests pass
