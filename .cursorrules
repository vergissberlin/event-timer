# Cursor Rules für Event Timer PWA

## Projekt-Übersicht
Dies ist eine Progressive Web App (PWA) für Event-Timer mit TypeScript, Tailwind CSS und automatischem GitHub Pages Deployment.

## Code-Stil & Konventionen

### Package Manager
- Verwende **pnpm** als Package Manager
- Alle npm-Befehle durch pnpm ersetzen
- pnpm-lock.yaml committen

### Schriftart
- Verwende **Montserrat** als primäre Schriftart
- Fallback: Sans-serif
- Google Fonts CDN für Montserrat einbinden

### TypeScript
- Strikte Typisierung verwenden
- Interface-basierte Entwicklung
- Keine any-Typen ohne explizite Begründung

### CSS/Tailwind
- Tailwind CSS für Styling
- Custom CSS nur wenn nötig
- Responsive Design priorisieren
- Montserrat als Standard-Schriftart

## Testing

### Test-Framework
- **Jest** als Test-Runner
- **jsdom** für DOM-Tests
- **ts-jest** für TypeScript-Support
- **@testing-library/jest-dom** für DOM-Assertions

### Test-Konventionen
- Unit Tests für alle Klassen und Funktionen
- Mock für externe Dependencies (fetch, Audio API, etc.)
- Test-Coverage mindestens 80%
- Beschreibende Test-Namen auf Deutsch

### Test-Struktur
```
tests/
├── setup.ts              # Jest Setup & Mocks
├── audio.test.ts         # AudioManager Tests
├── timer.test.ts         # Timer Tests
├── events.test.ts        # EventsManager Tests
├── settings.test.ts      # SettingsManager Tests
└── favicon.test.ts       # FaviconGenerator Tests
```

### Test-Befehle
- `pnpm test` - Alle Tests ausführen
- `pnpm test:watch` - Tests im Watch-Modus
- `pnpm test:coverage` - Tests mit Coverage-Report
- `pnpm test:ci` - Tests für CI/CD

## GitHub Actions

### Deployment
- Automatisches Deployment auf GitHub Pages
- Build bei Push auf main Branch
- PWA-Manifest und Service Worker korrekt konfiguriert
- HTTPS für PWA-Features erforderlich

### CI/CD Pipeline
- **Type Check**: TypeScript-Kompilierung
- **Lint**: ESLint mit TypeScript-Regeln
- **Format**: Prettier Code-Formatierung
- **Tests**: Jest Unit Tests mit Coverage
- **Build**: Vite Production Build

### Workflow-Regeln
- Node.js 18+ verwenden
- pnpm install und build
- gh-pages Branch für Deployment
- Cache für pnpm Dependencies

## PWA-spezifisch

### Manifest
- Korrekte Icons in verschiedenen Größen
- Theme-Farben konfiguriert
- Display: standalone

### Service Worker
- Offline-Funktionalität
- Cache-Strategien definiert
- Update-Handling

### Audio
- Web Audio API für dynamische Sound-Generierung
- Fallback zu HTML Audio
- Speech API für Countdown
- AudioContext-Management

## Commit Messages
- Englische Commit Messages
- Conventional Commits Format
- Klare, beschreibende Nachrichten

## Datei-Struktur
```
event-timer/
├── .github/workflows/     # GitHub Actions
├── src/                   # TypeScript Source
├── tests/                 # Unit Tests
├── data/                  # Event Configuration
├── public/               # Static Assets
└── dist/                 # Build Output
```

## Performance
- Lazy Loading für Bilder
- Minifizierung für Produktion
- Service Worker Caching
- Optimierte Bundle-Größe

## Browser-Kompatibilität
- Chrome/Chromium (Web Audio API)
- Firefox (Web Audio API)
- Safari (WebkitAudioContext)
- Edge (Web Audio API)
- Mobile Browser (iOS Safari, Chrome Mobile)

## Auto-Switch Feature
- Automatischer Wechsel zu Events (konfigurierbar)
- Standard: 30 Sekunden vor Event-Start
- Globale Konfiguration in settings.json
- Intelligente Navigation (Übersicht ↔ Detail)

## Audio-Features
- Warning Sound: 800Hz Sine-Wave, 0.5s
- End Sound: 3x 600Hz Square-Wave Pieptöne
- Start Sound: Dramatische Sequenz (Sweep + Akkord)
- Speech Countdown: Letzte 10 Sekunden
- AudioContext für Benutzerinteraktion aktivieren

## Error Handling
- Graceful Degradation bei fehlenden APIs
- Fallback-Mechanismen implementieren
- Benutzerfreundliche Fehlermeldungen
- Console-Logging für Debugging

## Security
- HTTPS für PWA-Features
- Content Security Policy
- Sanitize User Input
- Secure Audio Context Usage
